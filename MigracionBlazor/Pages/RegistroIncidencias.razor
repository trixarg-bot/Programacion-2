@page "/registro-incidencia"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="min-h-screen flex items-center justify-center bg-gray-100">
    <div class="max-w-md w-full space-y-8 p-8 bg-white rounded-lg shadow-lg">
        <div class="text-center">
            <h2 class="text-3xl font-bold text-gray-900">Registro de Incidencia</h2>
        </div>

        <EditForm Model="@incidenciaModel" OnValidSubmit="HandleRegistro" class="mt-8 space-y-6">
            <DataAnnotationsValidator />

            <div class="rounded-md shadow-sm space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700">Pasaporte</label>
                    <InputText @bind-Value="incidenciaModel.Pasaporte" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    <ValidationMessage For="@(() => incidenciaModel.Pasaporte)" class="text-red-500 text-sm" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Nombre</label>
                    <InputText @bind-Value="incidenciaModel.Nombre" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    <ValidationMessage For="@(() => incidenciaModel.Nombre)" class="text-red-500 text-sm" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Apellido</label>
                    <InputText @bind-Value="incidenciaModel.Apellido" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    <ValidationMessage For="@(() => incidenciaModel.Apellido)" class="text-red-500 text-sm" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">WhatsApp</label>
                    <InputText @bind-Value="incidenciaModel.WhatsApp" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    <ValidationMessage For="@(() => incidenciaModel.WhatsApp)" class="text-red-500 text-sm" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Fecha de Nacimiento</label>
                    <InputDate @bind-Value="incidenciaModel.FechaNacimiento" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    <ValidationMessage For="@(() => incidenciaModel.FechaNacimiento)" class="text-red-500 text-sm" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Latitud</label>
                    <InputNumber @bind-Value="incidenciaModel.Latitud" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    <ValidationMessage For="@(() => incidenciaModel.Latitud)" class="text-red-500 text-sm" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Longitud</label>
                    <InputNumber @bind-Value="incidenciaModel.Longitud" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                    <ValidationMessage For="@(() => incidenciaModel.Longitud)" class="text-red-500 text-sm" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Nacionalidad</label>
                    <InputText @bind-Value="incidenciaModel.Nacionalidad" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Observaciones</label>
                    <InputTextArea @bind-Value="incidenciaModel.Observaciones" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                </div>
            </div>

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative">
                    @successMessage
                </div>
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative">
                    @idverification
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
                    @errorMessage
                </div>
            }

            <button type="submit" class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Registrar Incidencia
            </button>
            <a href="/buscar-incidencia"
                class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 inline-block text-center">
                Buscar Incidencia
            </a>
        </EditForm>
    </div>
</div>

@code {
    private RegistroIncidenciaModel incidenciaModel = new();
    private string successMessage = string.Empty;

    private string idverification;

    private string errorMessage = string.Empty;

    private async Task HandleRegistro()
    {
        try
        {
            successMessage = string.Empty;
            errorMessage = string.Empty;

            var agente = await LocalStorage.GetItemAsync<UsuarioResponse>("user");
            if (agente != null)
            {
                incidenciaModel.CodigoAgente = agente.Id;

                var response = await Http.PostAsJsonAsync("api/Incidencias", incidenciaModel);

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<IncidenciaRegistradaResponse>();
                    if (result != null)
                    {
                        successMessage = result.Mensaje;
                        idverification = ($"Codigo de Incidencia: {result.Id}");
                        incidenciaModel = new RegistroIncidenciaModel();
                    }
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Error: {error}";
                }
            }
            else
            {
                errorMessage = "No se encontró información del agente. Por favor, inicie sesión nuevamente.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al registrar la incidencia: {ex.Message}";
        }
    }

    public class RegistroIncidenciaModel
    {
        [Required(ErrorMessage = "El pasaporte es requerido")]
        public string Pasaporte { get; set; }

        [Required(ErrorMessage = "El nombre es requerido")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El apellido es requerido")]
        public string Apellido { get; set; }

        [Required(ErrorMessage = "El WhatsApp es requerido")]
        public string WhatsApp { get; set; }

        [Required(ErrorMessage = "La fecha de nacimiento es requerida")]
        public DateTime FechaNacimiento { get; set; }

        [Required(ErrorMessage = "La latitud es requerida")]
        public double Latitud { get; set; }

        [Required(ErrorMessage = "La longitud es requerida")]
        public double Longitud { get; set; }

        public int CodigoAgente { get; set; }

        public string? Nacionalidad { get; set; }

        public string? Observaciones { get; set; }
    }

    public class IncidenciaRegistradaResponse
    {
        public int Id { get; set; }
        public string Mensaje { get; set; }
    }

    public class UsuarioResponse
    {
        public int Id { get; set; }
        public string Cedula { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Telefono { get; set; }
        public string Correo { get; set; }
    }
}