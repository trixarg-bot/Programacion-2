@page "/nueva-vivencia"
@page "/editar-vivencia/{Id:int}"
@using DiarioDeJuegos.Services
@using DiarioDeJuegos.Models
@using DiarioDeJuegos.Data
@using Blazored.Toast.Services
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject ApplicationDbContext DbContext
@inject IFileService FileService

<AuthView>
    <div class="container my-4">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card shadow">
                    <div class="card-header">
                        <h3 class="mb-0">@(Id.HasValue ? "Editar" : "Nueva") Vivencia ðŸŽ®</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@modelo" OnValidSubmit="GuardarVivencia" FormName="vivenciaForm">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label class="form-label">TÃ­tulo de tu vivencia:</label>
                                <InputText @bind-Value="modelo.Titulo" class="form-control" />
                                <ValidationMessage For="@(() => modelo.Titulo)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Describe tu experiencia:</label>
                                <InputTextArea @bind-Value="modelo.Descripcion" class="form-control" rows="4" />
                                <ValidationMessage For="@(() => modelo.Descripcion)" />
                                <small class="text-muted">CuÃ©ntanos sobre tu experiencia en el juego</small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Fecha de la vivencia:</label>
                                <InputDate @bind-Value="modelo.Fecha" class="form-control" />
                                <ValidationMessage For="@(() => modelo.Fecha)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Imagen (opcional):</label>
                                <InputFile OnChange="CargarImagen" class="form-control" accept=".jpg,.jpeg,.png" />
                                @if (!string.IsNullOrEmpty(modelo.ImagenUrl))
                                {
                                    <div class="mt-2">
                                        <img src="@modelo.ImagenUrl" class="img-thumbnail" style="max-height: 200px;" />
                                        <button type="button" class="btn btn-sm btn-danger ms-2" @onclick="EliminarImagen">
                                            Quitar imagen
                                        </button>
                                    </div>
                                }
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-outline-secondary" @onclick="Cancelar">
                                    Cancelar
                                </button>
                                <button type="submit" class="btn btn-primary">
                                    @(Id.HasValue ? "Guardar Cambios" : "Crear Vivencia")
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AuthView>

@code {
    [Parameter]
    public int? Id { get; set; }

    private VivenciaModel modelo = new();
    private string? imagenOriginal;

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var usuarioActual = SessionService.UsuarioActual;
            if (usuarioActual != null)
            {
                var vivencia = await DbContext.Vivencias
                .FirstOrDefaultAsync(v => v.Id == Id && v.UsuarioId == usuarioActual.Id);

                if (vivencia == null)
                {
                    NavigationManager.NavigateTo("/vivencias");
                    return;
                }

                modelo = new VivenciaModel
                    {
                        Titulo = vivencia.Titulo,
                        Descripcion = vivencia.Descripcion,
                        Fecha = vivencia.Fecha,
                        ImagenUrl = vivencia.ImagenUrl
                    };

                imagenOriginal = vivencia.ImagenUrl;
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        else
        {
            modelo.Fecha = DateTime.Today;
        }
    }

    private async Task CargarImagen(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                // Si hay una imagen temporal, la eliminamos
                if (!string.IsNullOrEmpty(modelo.ImagenUrl) && modelo.ImagenUrl != imagenOriginal)
                {
                    FileService.DeleteImage(modelo.ImagenUrl);
                }

                modelo.ImagenUrl = await FileService.SaveImageAsync(file);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error al cargar la imagen. IntÃ©ntalo de nuevo.");
        }
    }

    private void EliminarImagen()
    {
        if (!string.IsNullOrEmpty(modelo.ImagenUrl))
        {
            FileService.DeleteImage(modelo.ImagenUrl);
            modelo.ImagenUrl = null;
        }
    }

    private async Task GuardarVivencia()
    {
        var usuarioActual = SessionService.UsuarioActual;
        if (usuarioActual == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        try
        {
            if (Id.HasValue)
            {
                var vivencia = await DbContext.Vivencias
                .FirstOrDefaultAsync(v => v.Id == Id && v.UsuarioId == usuarioActual.Id);

                if (vivencia != null)
                {
                    // Si la imagen cambiÃ³, eliminar la anterior
                    if (imagenOriginal != modelo.ImagenUrl && !string.IsNullOrEmpty(imagenOriginal))
                    {
                        FileService.DeleteImage(imagenOriginal);
                    }

                    vivencia.Titulo = modelo.Titulo;
                    vivencia.Descripcion = modelo.Descripcion;
                    vivencia.Fecha = modelo.Fecha;
                    vivencia.ImagenUrl = modelo.ImagenUrl;

                    await DbContext.SaveChangesAsync();
                    ToastService.ShowSuccess("Â¡Vivencia actualizada con Ã©xito!");
                }
            }
            else
            {
                var vivencia = new Vivencia
                    {
                        Titulo = modelo.Titulo,
                        Descripcion = modelo.Descripcion,
                        Fecha = modelo.Fecha,
                        ImagenUrl = modelo.ImagenUrl,
                        UsuarioId = usuarioActual.Id
                    };

                DbContext.Vivencias.Add(vivencia);
                await DbContext.SaveChangesAsync();
                ToastService.ShowSuccess("Â¡Vivencia creada con Ã©xito!");
            }

            NavigationManager.NavigateTo("/vivencias");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("OcurriÃ³ un error al guardar la vivencia.");
        }
    }



    private void Cancelar()
    {
        // Si hay una imagen temporal, la eliminamos
        if (!string.IsNullOrEmpty(modelo.ImagenUrl) && modelo.ImagenUrl != imagenOriginal)
        {
            FileService.DeleteImage(modelo.ImagenUrl);
        }
        NavigationManager.NavigateTo("/vivencias");
    }

    public class VivenciaModel
    {
        [Required(ErrorMessage = "El tÃ­tulo es requerido")]
        [StringLength(100, MinimumLength = 3, ErrorMessage = "El tÃ­tulo debe tener entre 3 y 100 caracteres")]
        public string Titulo { get; set; } = string.Empty;

        [Required(ErrorMessage = "La descripciÃ³n es requerida")]
        [StringLength(1000, MinimumLength = 10, ErrorMessage = "La descripciÃ³n debe tener entre 10 y 1000 caracteres")]
        public string Descripcion { get; set; } = string.Empty;

        [Required(ErrorMessage = "La fecha es requerida")]
        public DateTime Fecha { get; set; }

        public string? ImagenUrl { get; set; }
    }
}